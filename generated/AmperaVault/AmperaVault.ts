// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PaymentLockCreated extends ethereum.Event {
  get params(): PaymentLockCreated__Params {
    return new PaymentLockCreated__Params(this);
  }
}

export class PaymentLockCreated__Params {
  _event: PaymentLockCreated;

  constructor(event: PaymentLockCreated) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get securedAssetId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get securedAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get convertible(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class PaymentLockResupplied extends ethereum.Event {
  get params(): PaymentLockResupplied__Params {
    return new PaymentLockResupplied__Params(this);
  }
}

export class PaymentLockResupplied__Params {
  _event: PaymentLockResupplied;

  constructor(event: PaymentLockResupplied) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PaymentLockReleased extends ethereum.Event {
  get params(): PaymentLockReleased__Params {
    return new PaymentLockReleased__Params(this);
  }
}

export class PaymentLockReleased__Params {
  _event: PaymentLockReleased;

  constructor(event: PaymentLockReleased) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PaymentLockClaimed extends ethereum.Event {
  get params(): PaymentLockClaimed__Params {
    return new PaymentLockClaimed__Params(this);
  }
}

export class PaymentLockClaimed__Params {
  _event: PaymentLockClaimed;

  constructor(event: PaymentLockClaimed) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PaymentLockExpired extends ethereum.Event {
  get params(): PaymentLockExpired__Params {
    return new PaymentLockExpired__Params(this);
  }
}

export class PaymentLockExpired__Params {
  _event: PaymentLockExpired;

  constructor(event: PaymentLockExpired) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PaymentLockExpirationExtended extends ethereum.Event {
  get params(): PaymentLockExpirationExtended__Params {
    return new PaymentLockExpirationExtended__Params(this);
  }
}

export class PaymentLockExpirationExtended__Params {
  _event: PaymentLockExpirationExtended;

  constructor(event: PaymentLockExpirationExtended) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get extension(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AmperaVault extends ethereum.SmartContract {
  static bind(address: Address): AmperaVault {
    return new AmperaVault("AmperaVault", address);
  }

  getCollateralHealth(
    collateralId: BigInt,
    collateralAmount: BigInt,
    securedAssetId: BigInt,
    securedAmount: BigInt
  ): BigInt {
    let result = super.call(
      "getCollateralHealth",
      "getCollateralHealth(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(collateralId),
        ethereum.Value.fromUnsignedBigInt(collateralAmount),
        ethereum.Value.fromUnsignedBigInt(securedAssetId),
        ethereum.Value.fromUnsignedBigInt(securedAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCollateralHealth(
    collateralId: BigInt,
    collateralAmount: BigInt,
    securedAssetId: BigInt,
    securedAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralHealth",
      "getCollateralHealth(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(collateralId),
        ethereum.Value.fromUnsignedBigInt(collateralAmount),
        ethereum.Value.fromUnsignedBigInt(securedAssetId),
        ethereum.Value.fromUnsignedBigInt(securedAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralHealthForLock(locker: Address, recipient: Address): BigInt {
    let result = super.call(
      "getCollateralHealthForLock",
      "getCollateralHealthForLock(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(locker),
        ethereum.Value.fromAddress(recipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCollateralHealthForLock(
    locker: Address,
    recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralHealthForLock",
      "getCollateralHealthForLock(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(locker),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  generateSpendAuthHash(
    sender: Address,
    recipient: Address,
    collateralId: BigInt,
    nonce: BigInt
  ): Bytes {
    let result = super.call(
      "generateSpendAuthHash",
      "generateSpendAuthHash(address,address,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(collateralId),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_generateSpendAuthHash(
    sender: Address,
    recipient: Address,
    collateralId: BigInt,
    nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "generateSpendAuthHash",
      "generateSpendAuthHash(address,address,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(collateralId),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  recover_sig(hash: Bytes, signature: Bytes): Address {
    let result = super.call(
      "recover_sig",
      "recover_sig(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(hash), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toAddress();
  }

  try_recover_sig(hash: Bytes, signature: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "recover_sig",
      "recover_sig(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(hash), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeeds(arg0: BigInt): Address {
    let result = super.call("priceFeeds", "priceFeeds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_priceFeeds(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeeds", "priceFeeds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  latestPrice(arg0: BigInt): BigInt {
    let result = super.call("latestPrice", "latestPrice(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_latestPrice(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestPrice", "latestPrice(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralAssets(arg0: BigInt): Address {
    let result = super.call(
      "collateralAssets",
      "collateralAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toAddress();
  }

  try_collateralAssets(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralAssets",
      "collateralAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposits(arg0: Address, arg1: BigInt): BigInt {
    let result = super.call("deposits", "deposits(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(arg0),
      ethereum.Value.fromUnsignedBigInt(arg1)
    ]);

    return result[0].toBigInt();
  }

  try_deposits(arg0: Address, arg1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposits",
      "deposits(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedDeposits(arg0: Address, arg1: BigInt): BigInt {
    let result = super.call(
      "lockedDeposits",
      "lockedDeposits(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );

    return result[0].toBigInt();
  }

  try_lockedDeposits(arg0: Address, arg1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedDeposits",
      "lockedDeposits(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  IERC1271_ISVALIDSIGNATURE_SELECTOR(): Bytes {
    let result = super.call(
      "IERC1271_ISVALIDSIGNATURE_SELECTOR",
      "IERC1271_ISVALIDSIGNATURE_SELECTOR():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_IERC1271_ISVALIDSIGNATURE_SELECTOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "IERC1271_ISVALIDSIGNATURE_SELECTOR",
      "IERC1271_ISVALIDSIGNATURE_SELECTOR():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get collateralId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class CreateLockCall extends ethereum.Call {
  get inputs(): CreateLockCall__Inputs {
    return new CreateLockCall__Inputs(this);
  }

  get outputs(): CreateLockCall__Outputs {
    return new CreateLockCall__Outputs(this);
  }
}

export class CreateLockCall__Inputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get securedAssetId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get securedAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateLockCall__Outputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }
}

export class CreateLock1Call extends ethereum.Call {
  get inputs(): CreateLock1Call__Inputs {
    return new CreateLock1Call__Inputs(this);
  }

  get outputs(): CreateLock1Call__Outputs {
    return new CreateLock1Call__Outputs(this);
  }
}

export class CreateLock1Call__Inputs {
  _call: CreateLock1Call;

  constructor(call: CreateLock1Call) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get securedAssetId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get securedAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateLock1Call__Outputs {
  _call: CreateLock1Call;

  constructor(call: CreateLock1Call) {
    this._call = call;
  }
}

export class ResupplyLockCall extends ethereum.Call {
  get inputs(): ResupplyLockCall__Inputs {
    return new ResupplyLockCall__Inputs(this);
  }

  get outputs(): ResupplyLockCall__Outputs {
    return new ResupplyLockCall__Outputs(this);
  }
}

export class ResupplyLockCall__Inputs {
  _call: ResupplyLockCall;

  constructor(call: ResupplyLockCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ResupplyLockCall__Outputs {
  _call: ResupplyLockCall;

  constructor(call: ResupplyLockCall) {
    this._call = call;
  }
}

export class ExtendLockCall extends ethereum.Call {
  get inputs(): ExtendLockCall__Inputs {
    return new ExtendLockCall__Inputs(this);
  }

  get outputs(): ExtendLockCall__Outputs {
    return new ExtendLockCall__Outputs(this);
  }
}

export class ExtendLockCall__Inputs {
  _call: ExtendLockCall;

  constructor(call: ExtendLockCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get timeExtension(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExtendLockCall__Outputs {
  _call: ExtendLockCall;

  constructor(call: ExtendLockCall) {
    this._call = call;
  }
}

export class ClaimCollateralCall extends ethereum.Call {
  get inputs(): ClaimCollateralCall__Inputs {
    return new ClaimCollateralCall__Inputs(this);
  }

  get outputs(): ClaimCollateralCall__Outputs {
    return new ClaimCollateralCall__Outputs(this);
  }
}

export class ClaimCollateralCall__Inputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get claimRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimCollateralCall__Outputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }
}

export class ClaimCollateral1Call extends ethereum.Call {
  get inputs(): ClaimCollateral1Call__Inputs {
    return new ClaimCollateral1Call__Inputs(this);
  }

  get outputs(): ClaimCollateral1Call__Outputs {
    return new ClaimCollateral1Call__Outputs(this);
  }
}

export class ClaimCollateral1Call__Inputs {
  _call: ClaimCollateral1Call;

  constructor(call: ClaimCollateral1Call) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get claimRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get convertCollateral(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ClaimCollateral1Call__Outputs {
  _call: ClaimCollateral1Call;

  constructor(call: ClaimCollateral1Call) {
    this._call = call;
  }
}

export class UnlockWithSignatureCall extends ethereum.Call {
  get inputs(): UnlockWithSignatureCall__Inputs {
    return new UnlockWithSignatureCall__Inputs(this);
  }

  get outputs(): UnlockWithSignatureCall__Outputs {
    return new UnlockWithSignatureCall__Outputs(this);
  }
}

export class UnlockWithSignatureCall__Inputs {
  _call: UnlockWithSignatureCall;

  constructor(call: UnlockWithSignatureCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sig(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class UnlockWithSignatureCall__Outputs {
  _call: UnlockWithSignatureCall;

  constructor(call: UnlockWithSignatureCall) {
    this._call = call;
  }
}

export class FreeExpiredLockCall extends ethereum.Call {
  get inputs(): FreeExpiredLockCall__Inputs {
    return new FreeExpiredLockCall__Inputs(this);
  }

  get outputs(): FreeExpiredLockCall__Outputs {
    return new FreeExpiredLockCall__Outputs(this);
  }
}

export class FreeExpiredLockCall__Inputs {
  _call: FreeExpiredLockCall;

  constructor(call: FreeExpiredLockCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class FreeExpiredLockCall__Outputs {
  _call: FreeExpiredLockCall;

  constructor(call: FreeExpiredLockCall) {
    this._call = call;
  }
}

export class ConvertLockCall extends ethereum.Call {
  get inputs(): ConvertLockCall__Inputs {
    return new ConvertLockCall__Inputs(this);
  }

  get outputs(): ConvertLockCall__Outputs {
    return new ConvertLockCall__Outputs(this);
  }
}

export class ConvertLockCall__Inputs {
  _call: ConvertLockCall;

  constructor(call: ConvertLockCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get collateralId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConvertLockCall__Outputs {
  _call: ConvertLockCall;

  constructor(call: ConvertLockCall) {
    this._call = call;
  }
}

export class FlashConvertLockCall extends ethereum.Call {
  get inputs(): FlashConvertLockCall__Inputs {
    return new FlashConvertLockCall__Inputs(this);
  }

  get outputs(): FlashConvertLockCall__Outputs {
    return new FlashConvertLockCall__Outputs(this);
  }
}

export class FlashConvertLockCall__Inputs {
  _call: FlashConvertLockCall;

  constructor(call: FlashConvertLockCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get collateralId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FlashConvertLockCall__Outputs {
  _call: FlashConvertLockCall;

  constructor(call: FlashConvertLockCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetLockTimeCall extends ethereum.Call {
  get inputs(): SetLockTimeCall__Inputs {
    return new SetLockTimeCall__Inputs(this);
  }

  get outputs(): SetLockTimeCall__Outputs {
    return new SetLockTimeCall__Outputs(this);
  }
}

export class SetLockTimeCall__Inputs {
  _call: SetLockTimeCall;

  constructor(call: SetLockTimeCall) {
    this._call = call;
  }

  get lockTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLockTimeCall__Outputs {
  _call: SetLockTimeCall;

  constructor(call: SetLockTimeCall) {
    this._call = call;
  }
}

export class SetMaxLockTimeCall extends ethereum.Call {
  get inputs(): SetMaxLockTimeCall__Inputs {
    return new SetMaxLockTimeCall__Inputs(this);
  }

  get outputs(): SetMaxLockTimeCall__Outputs {
    return new SetMaxLockTimeCall__Outputs(this);
  }
}

export class SetMaxLockTimeCall__Inputs {
  _call: SetMaxLockTimeCall;

  constructor(call: SetMaxLockTimeCall) {
    this._call = call;
  }

  get maxLockTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLockTimeCall__Outputs {
  _call: SetMaxLockTimeCall;

  constructor(call: SetMaxLockTimeCall) {
    this._call = call;
  }
}

export class SetCollateralParamsCall extends ethereum.Call {
  get inputs(): SetCollateralParamsCall__Inputs {
    return new SetCollateralParamsCall__Inputs(this);
  }

  get outputs(): SetCollateralParamsCall__Outputs {
    return new SetCollateralParamsCall__Outputs(this);
  }
}

export class SetCollateralParamsCall__Inputs {
  _call: SetCollateralParamsCall;

  constructor(call: SetCollateralParamsCall) {
    this._call = call;
  }

  get collateralAssetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get decimals(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get priceFeed(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetCollateralParamsCall__Outputs {
  _call: SetCollateralParamsCall;

  constructor(call: SetCollateralParamsCall) {
    this._call = call;
  }
}

export class SetPriceFeedCall extends ethereum.Call {
  get inputs(): SetPriceFeedCall__Inputs {
    return new SetPriceFeedCall__Inputs(this);
  }

  get outputs(): SetPriceFeedCall__Outputs {
    return new SetPriceFeedCall__Outputs(this);
  }
}

export class SetPriceFeedCall__Inputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPriceFeedCall__Outputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }
}

export class SetMinCollatFactorCall extends ethereum.Call {
  get inputs(): SetMinCollatFactorCall__Inputs {
    return new SetMinCollatFactorCall__Inputs(this);
  }

  get outputs(): SetMinCollatFactorCall__Outputs {
    return new SetMinCollatFactorCall__Outputs(this);
  }
}

export class SetMinCollatFactorCall__Inputs {
  _call: SetMinCollatFactorCall;

  constructor(call: SetMinCollatFactorCall) {
    this._call = call;
  }

  get collateralId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newFactor(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinCollatFactorCall__Outputs {
  _call: SetMinCollatFactorCall;

  constructor(call: SetMinCollatFactorCall) {
    this._call = call;
  }
}

export class UpdatePriceCall extends ethereum.Call {
  get inputs(): UpdatePriceCall__Inputs {
    return new UpdatePriceCall__Inputs(this);
  }

  get outputs(): UpdatePriceCall__Outputs {
    return new UpdatePriceCall__Outputs(this);
  }
}

export class UpdatePriceCall__Inputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }

  get collateralId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePriceCall__Outputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }
}
